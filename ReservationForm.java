
package VRSgui;
import BackendVRS.Vehicles;
import VRSdatabase.DBConnect;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.*;
import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import session.Clientsession;


public class ReservationForm extends javax.swing.JFrame {

    private String vehicleModel;
    private String vehicleIDInput;
    private LocalDate selectedRentalStartDate;
    private LocalDate selectedRentalEndDate;
    
    public ReservationForm() {
        initComponents();
    }
    

    
    
    
        private void confirmReservation(String vehicleID) {
            // For now, just confirm the reservation without updating the vehicle status
            JOptionPane.showMessageDialog(this, "You have successfully reserved the vehicle with ID: " + vehicleID);
        }
    
    private void showAvailableVehicles(Connection conn) {
    String query = "SELECT vehicleID, vehicleModel, vehiclePrice, vehicleStatus, 'vehiclecar' AS tableName FROM vehiclecar UNION ALL " +
                   "SELECT vehicleID, vehicleModel, vehiclePrice, vehicleStatus, 'vehiclevan' AS tableName FROM vehiclevan UNION ALL " +
                   "SELECT vehicleID, vehicleModel, vehiclePrice, vehicleStatus, 'vehicletruck' AS tableName FROM vehicletruck UNION ALL " +
                   "SELECT vehicleID, vehicleModel, vehiclePrice, vehicleStatus, 'vehiclesuv' AS tableName FROM vehiclesuv UNION ALL " +
                   "SELECT vehicleID, vehicleModel, vehiclePrice, vehicleStatus, 'vehiclemotor' AS tableName FROM vehiclemotor";

    try (Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(query)) {

        StringBuilder allVehicles = new StringBuilder("All Vehicles:\n");
        while (rs.next()) {
            allVehicles.append("ID: ").append(rs.getInt("vehicleID"))
                       .append(" | Name: ").append(rs.getString("vehicleModel"))
                       .append(" | Price: $").append(rs.getDouble("vehiclePrice"))
                       .append(" | Status: ").append(rs.getString("vehicleStatus"))
                       .append("\n");
        }
        JOptionPane.showMessageDialog(this, allVehicles.toString(), "All Vehicles", JOptionPane.INFORMATION_MESSAGE);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error while fetching vehicles: " + e.getMessage());
    }
    }
    
        private void checkVehicleAvailability(Connection conn, String vehicleID) {
        String query = "SELECT * FROM rentedvehicles WHERE vehicleID = ? AND clientID IS NULL"; // Assuming clientID is NULL if the vehicle is rented

        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, vehicleID);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    // Vehicle is currently rented, get the rental end date
                    String rentalEndDate = rs.getString("rentalEndDate"); // Assuming rentalEndDate exists
                    JOptionPane.showMessageDialog(this, "The vehicle is currently rented. It will be available on: " + rentalEndDate);
                } else {
                    // Vehicle is available, confirm reservation
                    confirmReservation(vehicleID);
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error while checking vehicle availability: " + e.getMessage());
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        }
        }
    // Method to store the reservation in the database



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblLoginadmin = new javax.swing.JLabel();
        jLabel135 = new javax.swing.JLabel();
        backtomenu = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        namereserve = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        contactreserve = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        emailreserve = new javax.swing.JTextField();
        Vehiclerents = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        addressreserve = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        payreservation = new javax.swing.JButton();
        reservationreciept = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jPanel2.setBackground(new java.awt.Color(0, 51, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblLoginadmin.setFont(new java.awt.Font("Swis721 BlkCn BT", 1, 27)); // NOI18N
        lblLoginadmin.setForeground(new java.awt.Color(255, 255, 255));
        lblLoginadmin.setText("RESERVATION FORM ");

        jLabel135.setFont(new java.awt.Font("Swis721 BlkCn BT", 0, 14)); // NOI18N
        jLabel135.setForeground(new java.awt.Color(255, 255, 255));
        jLabel135.setText("VROOMSKI RENTS");
        jLabel135.setToolTipText("");

        backtomenu.setBackground(new java.awt.Color(204, 204, 204));
        backtomenu.setFont(new java.awt.Font("Swis721 BlkCn BT", 0, 18)); // NOI18N
        backtomenu.setText("BACK");
        backtomenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backtomenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel135)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblLoginadmin)
                        .addGap(18, 18, 18)
                        .addComponent(backtomenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel135, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(backtomenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblLoginadmin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Swis721 BlkCn BT", 0, 14)); // NOI18N
        jLabel1.setText("NAME: ");

        namereserve.setFont(new java.awt.Font("Swis721 BlkCn BT", 0, 14)); // NOI18N
        namereserve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namereserveActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Swis721 BlkCn BT", 0, 14)); // NOI18N
        jLabel3.setText("CONTACT NUMBER: ");

        contactreserve.setFont(new java.awt.Font("Swis721 BlkCn BT", 0, 14)); // NOI18N
        contactreserve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactreserveActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Swis721 BlkCn BT", 0, 14)); // NOI18N
        jLabel4.setText("EMAIL ADDRESS: ");

        emailreserve.setFont(new java.awt.Font("Swis721 BlkCn BT", 0, 14)); // NOI18N
        emailreserve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailreserveActionPerformed(evt);
            }
        });

        Vehiclerents.setBackground(new java.awt.Color(255, 255, 255));
        Vehiclerents.setFont(new java.awt.Font("Swis721 BlkCn BT", 1, 24)); // NOI18N
        Vehiclerents.setText("VEHICLES");
        Vehiclerents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VehiclerentsActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Swis721 BlkCn BT", 0, 14)); // NOI18N
        jLabel2.setText("ADDRESS:");

        addressreserve.setFont(new java.awt.Font("Swis721 BlkCn BT", 0, 14)); // NOI18N
        addressreserve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressreserveActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Swis721 BlkCn BT", 0, 14)); // NOI18N
        jLabel5.setText("CHOOSE VEHICLE: ");

        jLabel6.setFont(new java.awt.Font("Swis721 BlkCn BT", 0, 14)); // NOI18N
        jLabel6.setText("PAY RESERVATION FEE:");

        payreservation.setBackground(new java.awt.Color(255, 255, 255));
        payreservation.setFont(new java.awt.Font("Swis721 BlkCn BT", 1, 24)); // NOI18N
        payreservation.setText("PAY");
        payreservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payreservationActionPerformed(evt);
            }
        });

        reservationreciept.setBackground(new java.awt.Color(255, 255, 255));
        reservationreciept.setFont(new java.awt.Font("Swis721 BlkCn BT", 0, 18)); // NOI18N
        reservationreciept.setText("SUBMIT");
        reservationreciept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservationrecieptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(namereserve, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(addressreserve, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(emailreserve, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                        .addComponent(contactreserve))
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(payreservation, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Vehiclerents, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(reservationreciept, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(namereserve, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addComponent(Vehiclerents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(addressreserve, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contactreserve, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(payreservation, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(emailreserve, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(reservationreciept, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void storePaymentDetails(Connection conn, double payAmount, LocalDate paymentDate) {
    // Just print the payment details, no query logic
    System.out.println("Reservation fee payment details:");
    System.out.println("Amount: " + payAmount);
    System.out.println("Payment Date: " + paymentDate);
}
    
    private void storeReservation(String vehicleModel, LocalDate rentalStartDate, LocalDate rentalEndDate) {
       
    JOptionPane.showMessageDialog(this, 
        "Reservation stored successfully for:\n" +
        "Vehicle: " + vehicleModel + "\n" +
        "Rental Period: " + rentalStartDate + " to " + rentalEndDate, 
        "Reservation Confirmed", 
        JOptionPane.INFORMATION_MESSAGE);
}
    
    private boolean isDateOverlapping(Connection conn, String vehicleModel, LocalDate rentalStartDate, LocalDate rentalEndDate) {
    String query = "SELECT rentalStart, rentralEnd FROM reciept WHERE vehicleModel = ?";
    try (PreparedStatement pstmt = conn.prepareStatement(query)) {
        // Set the vehicle model in the query
        pstmt.setString(1, vehicleModel); 
        
        try (ResultSet rs = pstmt.executeQuery()) {
            while (rs.next()) {
                LocalDate existingStart = rs.getDate("rentalStart").toLocalDate();
                LocalDate existingEnd = rs.getDate("rentralEnd").toLocalDate();

                // Check if the requested rental period overlaps with an existing rental
                if ((rentalStartDate.isBefore(existingEnd) && rentalEndDate.isAfter(existingStart)) ||
                    rentalStartDate.equals(existingStart) || rentalEndDate.equals(existingEnd)) {
                    // Notify the user about the conflicting rental period
                    JOptionPane.showMessageDialog(this, "The vehicle model \"" + vehicleModel + 
                            "\" is already reserved from " + existingStart + " to " + existingEnd + 
                            ". Please choose another date.");
                    return true; // Overlap found
                }
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error checking availability: " + e.getMessage());
    }
    return false; // No overlap found
}

    
    // Utility method to validate date format
    private boolean isValidDate(String dateStr) {
        try {
            LocalDate.parse(dateStr);
            return true;
        } catch (DateTimeParseException e) {
            return false;
        }
    }

    
    private void namereserveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namereserveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namereserveActionPerformed

    private void contactreserveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactreserveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contactreserveActionPerformed

    private void emailreserveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailreserveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailreserveActionPerformed
    
    private void VehiclerentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VehiclerentsActionPerformed
     // Fetch vehicle ID and model details
String url = "jdbc:mysql://localhost:3306/vehiclerentalsystem";
String dbUser = "root";
String dbPassword = "";

try (Connection conn = DriverManager.getConnection(url, dbUser, dbPassword)) {
    // Display available vehicles
    showAvailableVehicles(conn);

    // Prompt user for vehicle ID
        vehicleIDInput = JOptionPane.showInputDialog(this, "Enter the vehicle ID you want to reserve:");

    if (vehicleIDInput != null && !vehicleIDInput.trim().isEmpty()) {
        // Retrieve details of the chosen vehicle
        String query = "SELECT vehicleModel, vehiclePrice FROM (" +
                "SELECT vehicleID, vehicleModel, vehiclePrice FROM vehiclecar UNION ALL " +
                "SELECT vehicleID, vehicleModel, vehiclePrice FROM vehiclevan UNION ALL " +
                "SELECT vehicleID, vehicleModel, vehiclePrice FROM vehicletruck UNION ALL " +
                "SELECT vehicleID, vehicleModel, vehiclePrice FROM vehiclesuv UNION ALL " +
                "SELECT vehicleID, vehicleModel, vehiclePrice FROM vehiclemotor" +
                ") AS allVehicles WHERE vehicleID = ?";

        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, vehicleIDInput.trim());

            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    // Fetch vehicle details
                        vehicleModel = rs.getString("vehicleModel");
                    double vehiclePrice = rs.getDouble("vehiclePrice");

                    // Display vehicle details
                    JOptionPane.showMessageDialog(this,
                            "You have chosen:\nVehicle: " + vehicleModel +
                            "\nPrice: " + vehiclePrice,
                            "Vehicle Selected", JOptionPane.INFORMATION_MESSAGE);

                    // Prompt for rental dates
                    boolean validDates = false;

                    while (!validDates) {
                        String rentalStartInput = JOptionPane.showInputDialog(this, "Enter the rental start date (YYYY-MM-DD):");
                        String rentalEndInput = JOptionPane.showInputDialog(this, "Enter the rental end date (YYYY-MM-DD):");

                        if (rentalStartInput != null && rentalEndInput != null &&
                                !rentalStartInput.trim().isEmpty() && !rentalEndInput.trim().isEmpty()) {
                                selectedRentalStartDate = LocalDate.parse(rentalStartInput.trim());
                                selectedRentalEndDate = LocalDate.parse(rentalEndInput.trim());

                                if (!isDateOverlapping(conn, vehicleModel, selectedRentalStartDate, selectedRentalEndDate)) {
                                // Dates are valid and do not overlap
                                    storeReservation(vehicleModel, selectedRentalStartDate, selectedRentalEndDate);
                                validDates = true;
                            } else {
                                JOptionPane.showMessageDialog(this,
                                        "The vehicle is already reserved during these dates.\n" +
                                        "Please enter new dates.", "Date Conflict", JOptionPane.WARNING_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Invalid rental dates entered.");
                            break;
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid vehicle ID. Please try again.");
                }
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "No vehicle ID entered.");
    }
} catch (SQLException e) {
    JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
    e.printStackTrace();
}
    }//GEN-LAST:event_VehiclerentsActionPerformed

    private void addressreserveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressreserveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressreserveActionPerformed

    private void payreservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payreservationActionPerformed
        String url = "jdbc:mysql://localhost:3306/vehiclerentalsystem";
    String dbUser = "root";
    String dbPassword = "";

    // Fixed reservation fee
    double reservationFee = 500.00; // Set the fixed reservation fee value here

    try (Connection conn = DriverManager.getConnection(url, dbUser, dbPassword)) {
        // Display the fixed reservation fee amount
        JOptionPane.showMessageDialog(this, 
            "The required reservation fee is: " + reservationFee + "\nPlease note: The reservation fee is non-refundable.", 
            "Reservation Fee", JOptionPane.INFORMATION_MESSAGE);

        // Prompt the user to input the payment date
        String paymentDateInput = JOptionPane.showInputDialog(this, "Enter the payment date (YYYY-MM-DD):");

        if (paymentDateInput != null && !paymentDateInput.trim().isEmpty()) {
            try {
                // Parse the payment date
                LocalDate paymentDate = LocalDate.parse(paymentDateInput.trim());

                // Confirm reservation fee payment details with the user, including non-refundable message
                int confirm = JOptionPane.showConfirmDialog(this, 
                    "Confirm Reservation Fee Payment Details:\n" +
                    "Reservation Fee: " + reservationFee + "\n" +
                    "Payment Date: " + paymentDate + "\n\n" +
                    "Please note: The reservation fee is non-refundable.",
                    "Confirm Payment", 
                    JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    // Store reservation fee payment information
                    storePaymentDetails(conn, reservationFee, paymentDate);
                    
                    JOptionPane.showMessageDialog(this, 
                        "Reservation fee of " + reservationFee + " on " + paymentDate + " was successful.", 
                        "Payment Confirmed", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Payment cancelled.");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Invalid payment date. Please use the format YYYY-MM-DD.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Payment date cannot be empty.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_payreservationActionPerformed
    
    
    private void reservationrecieptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservationrecieptActionPerformed
                if (vehicleModel == null || vehicleIDInput == null || selectedRentalStartDate == null || selectedRentalEndDate == null ||
              namereserve == null || contactreserve == null || emailreserve == null || addressreserve == null) {
              JOptionPane.showMessageDialog(this, "Reservation details are incomplete. Please make a reservation first.", 
                      "Error", JOptionPane.ERROR_MESSAGE);
              return;
          }

          // Define the SQL query to insert the reservation data
          String insertReservationQuery = "INSERT INTO reservation (clientName, address, ContactNumber, Email, vehicleID, vehicleModel, rentalstart, retnalend) " +
                                          "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

          // Connect to the database and insert the reservation details
          String url = "jdbc:mysql://localhost:3306/vehiclerentalsystem";
          String dbUser = "root";
          String dbPassword = "";

          String name = namereserve.getText();
          String address = addressreserve.getText();
          String contact = contactreserve.getText();
          String email = emailreserve.getText();

          try (Connection conn = DriverManager.getConnection(url, dbUser, dbPassword)) {
              // Prepare the insert statement
              try (PreparedStatement pstmt = conn.prepareStatement(insertReservationQuery, 
                                                                 Statement.RETURN_GENERATED_KEYS)) {
                  pstmt.setString(1, name);         // Client Name
                  pstmt.setString(2, address);      // Client Address
                  pstmt.setString(3, contact);      // Contact Number
                  pstmt.setString(4, email);        // Email
                  pstmt.setString(5, vehicleIDInput);      // Vehicle ID
                  pstmt.setString(6, vehicleModel);        // Vehicle Model
                  pstmt.setDate(7, java.sql.Date.valueOf(selectedRentalStartDate)); // Rental Start Date
                  pstmt.setDate(8, java.sql.Date.valueOf(selectedRentalEndDate));   // Rental End Date

                  // Execute the query
                  int rowsAffected = pstmt.executeUpdate();
                  if (rowsAffected > 0) {
                      // Retrieve the generated receiptID
                      try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                          if (generatedKeys.next()) {
                              long receiptID = generatedKeys.getLong(1);  // Retrieve the auto-generated key (receiptID)
                              JOptionPane.showMessageDialog(this, "Reservation details stored successfully. Receipt ID: " + receiptID);
                          
                          }
                      }
                  } else {
                      JOptionPane.showMessageDialog(this, "Failed to store reservation details.");
                  }
              }
          } catch (SQLException e) {
              e.printStackTrace();
              JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
          }
          
          

    
    }//GEN-LAST:event_reservationrecieptActionPerformed

    private void backtomenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backtomenuActionPerformed
        usermenu next = new usermenu();
        next.setVisible(rootPaneCheckingEnabled);
        dispose();

    }//GEN-LAST:event_backtomenuActionPerformed
    private void openReceiptFrame() {
        reservationreceipt receiptFrame = new reservationreceipt();
        receiptFrame.setReservationDetails(
            namereserve, addressreserve, contactreserve, emailreserve,
            vehicleIDInput, vehicleModel, selectedRentalStartDate, selectedRentalEndDate
        );

        receiptFrame.setVisible(true);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReservationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReservationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReservationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReservationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReservationForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Vehiclerents;
    private javax.swing.JTextField addressreserve;
    private javax.swing.JButton backtomenu;
    private javax.swing.JTextField contactreserve;
    private javax.swing.JTextField emailreserve;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel135;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblLoginadmin;
    private javax.swing.JTextField namereserve;
    private javax.swing.JButton payreservation;
    private javax.swing.JButton reservationreciept;
    // End of variables declaration//GEN-END:variables
}
